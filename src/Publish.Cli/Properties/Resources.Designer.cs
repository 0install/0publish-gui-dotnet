//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ZeroInstall.Publish.Cli.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ZeroInstall.Publish.Cli.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please enter the GnuPG passphrase for {0}:.
        /// </summary>
        internal static string AskForPassphrase {
            get {
                return ResourceManager.GetString("AskForPassphrase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Building bootstrapper.
        /// </summary>
        internal static string BuildingBootstrapper {
            get {
                return ResourceManager.GetString("BuildingBootstrapper", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Builds a customized Zero Install Bootstrapper for running or integrating a specific feed..
        /// </summary>
        internal static string DescriptionBootstrap {
            get {
                return ResourceManager.GetString("DescriptionBootstrap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Captures snapshots of the system state and compares them to generate a feed..
        /// </summary>
        internal static string DescriptionCapture {
            get {
                return ResourceManager.GetString("DescriptionCapture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloading {0}.
        /// </summary>
        internal static string Downloading {
            get {
                return ResourceManager.GetString("Downloading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feed does not have the correct format..
        /// </summary>
        internal static string FeedNotValid {
            get {
                return ResourceManager.GetString("FeedNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file &apos;{0}&apos; already exists. Use --force to overwrite..
        /// </summary>
        internal static string FileAlreadyExists {
            get {
                return ResourceManager.GetString("FileAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This program comes with ABSOLUTELY NO WARRANTY, to the extent permitted by law.
        ///You may redistribute copies of this program under the terms of the GNU Lesser General Public License..
        /// </summary>
        internal static string LicenseInfo {
            get {
                return ResourceManager.GetString("LicenseInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing arguments. Try {0}.
        /// </summary>
        internal static string MissingArguments {
            get {
                return ResourceManager.GetString("MissingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find any matching feed files..
        /// </summary>
        internal static string NoFeedFilesFound {
            get {
                return ResourceManager.GetString("NoFeedFilesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download missing archives, calculate manifest digests, etc...
        /// </summary>
        internal static string OptionAddMissing {
            get {
                return ResourceManager.GetString("OptionAddMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional command-line {ARGUMENTS} to pass to the application launched by the feed..
        /// </summary>
        internal static string OptionAppArgs {
            get {
                return ResourceManager.GetString("OptionAppArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Combine all specified feeds into a single catalog {FILE}..
        /// </summary>
        internal static string OptionCatalog {
            get {
                return ResourceManager.GetString("OptionCatalog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {URI} of the catalog to replace the default catalog. Only applies if Zero Install is not already deployed..
        /// </summary>
        internal static string OptionCatalogUri {
            get {
                return ResourceManager.GetString("OptionCatalogUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {PATH} of the ZIP file to create from the installation directory. Leave unset to create no ZIP archive..
        /// </summary>
        internal static string OptionCollectFiles {
            get {
                return ResourceManager.GetString("OptionCollectFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set a Zero Install configuration {0:OPTION} to a specific {1:VALUE}. Only overrides existing config files if Zero Install is not already deployed..
        /// </summary>
        internal static string OptionConfig {
            get {
                return ResourceManager.GetString("OptionConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PATH} to a directory containing additional content to be embedded in the bootstrapper. You can generate such a directory using &apos;0install export&apos;..
        /// </summary>
        internal static string OptionContent {
            get {
                return ResourceManager.GetString("OptionContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Offer the user to choose a custom path for storing implementations..
        /// </summary>
        internal static string OptionCustomizableStorePath {
            get {
                return ResourceManager.GetString("OptionCustomizableStorePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show the estimated disk {SPACE} required (in bytes). Implicitly sets --customizable-store-path too..
        /// </summary>
        internal static string OptionEstimatedRequiredSpace {
            get {
                return ResourceManager.GetString("OptionEstimatedRequiredSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overwrite existing files..
        /// </summary>
        internal static string OptionForce {
            get {
                return ResourceManager.GetString("OptionForce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use {PASS} to unlock the GnuPG secret key..
        /// </summary>
        internal static string OptionGnuPGPassphrase {
            get {
                return ResourceManager.GetString("OptionGnuPGPassphrase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show the built-in help text..
        /// </summary>
        internal static string OptionHelp {
            get {
                return ResourceManager.GetString("OptionHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {PATH} of the directory the application to be captured is installed in. Leave unset to auto-detect..
        /// </summary>
        internal static string OptionInstallationDirectory {
            get {
                return ResourceManager.GetString("OptionInstallationDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command-line {ARGUMENTS} to pass to &apos;0install integrate&apos;. Leave unset to not call &apos;0install integrate&apos; at all..
        /// </summary>
        internal static string OptionIntegrateArgs {
            get {
                return ResourceManager.GetString("OptionIntegrateArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key to use for signing (if you have more than one, or if you want to resign with a different key)..
        /// </summary>
        internal static string OptionKey {
            get {
                return ResourceManager.GetString("OptionKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The relative {PATH} to the main EXE of the application to be captured. Leave unset to auto-detect..
        /// </summary>
        internal static string OptionMainExe {
            get {
                return ResourceManager.GetString("OptionMainExe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options:.
        /// </summary>
        internal static string Options {
            get {
                return ResourceManager.GetString("Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {URI} or path to the boostrap template executable. Leave unset to download from default location..
        /// </summary>
        internal static string OptionTemplate {
            get {
                return ResourceManager.GetString("OptionTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove any existing signatures..
        /// </summary>
        internal static string OptionUnsign {
            get {
                return ResourceManager.GetString("OptionUnsign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display version information..
        /// </summary>
        internal static string OptionVersion {
            get {
                return ResourceManager.GetString("OptionVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add an XML signature block. (All remote feeds must be signed.).
        /// </summary>
        internal static string OptionXmlSign {
            get {
                return ResourceManager.GetString("OptionXmlSign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown operation mode.
        ///Try {0}.
        /// </summary>
        internal static string UnknownMode {
            get {
                return ResourceManager.GetString("UnknownMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage:.
        /// </summary>
        internal static string Usage {
            get {
                return ResourceManager.GetString("Usage", resourceCulture);
            }
        }
    }
}
