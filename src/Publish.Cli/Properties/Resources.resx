<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AskForPassphrase" xml:space="preserve">
    <value>Please enter the GnuPG passphrase for {0}:</value>
  </data>
  <data name="BuildingBootstrapper" xml:space="preserve">
    <value>Building bootstrapper</value>
  </data>
  <data name="DescriptionBootstrap" xml:space="preserve">
    <value>Builds a customized Zero Install Bootstrapper for running or integrating a specific feed.</value>
  </data>
  <data name="DescriptionCapture" xml:space="preserve">
    <value>Captures snapshots of the system state and compares them to generate a feed.</value>
  </data>
  <data name="Downloading" xml:space="preserve">
    <value>Downloading {0}</value>
  </data>
  <data name="FeedNotValid" xml:space="preserve">
    <value>The feed does not have the correct format.</value>
  </data>
  <data name="FileAlreadyExists" xml:space="preserve">
    <value>The file '{0}' already exists. Use --force to overwrite.</value>
  </data>
  <data name="LicenseInfo" xml:space="preserve">
    <value>This program comes with ABSOLUTELY NO WARRANTY, to the extent permitted by law.
You may redistribute copies of this program under the terms of the GNU Lesser General Public License.</value>
  </data>
  <data name="MissingArguments" xml:space="preserve">
    <value>Missing arguments. Try {0}</value>
  </data>
  <data name="NoFeedFilesFound" xml:space="preserve">
    <value>Unable to find any matching feed files.</value>
  </data>
  <data name="OptionAddMissing" xml:space="preserve">
    <value>Download missing archives, calculate manifest digests, etc..</value>
  </data>
  <data name="OptionAppArgs" xml:space="preserve">
    <value>Additional command-line {ARGUMENTS} to pass to the application launched by the feed.</value>
  </data>
  <data name="OptionCatalog" xml:space="preserve">
    <value>Combine all specified feeds into a single catalog {FILE}.</value>
  </data>
  <data name="OptionCatalogUri" xml:space="preserve">
    <value>The {URI} of the catalog to replace the default catalog. Only applies if Zero Install is not already deployed.</value>
  </data>
  <data name="OptionCollectFiles" xml:space="preserve">
    <value>The {PATH} of the ZIP file to create from the installation directory. Leave unset to create no ZIP archive.</value>
  </data>
  <data name="OptionConfig" xml:space="preserve">
    <value>Set a Zero Install configuration {0:OPTION} to a specific {1:VALUE}. Only overrides existing config files if Zero Install is not already deployed.</value>
  </data>
  <data name="OptionContent" xml:space="preserve">
    <value>{PATH} to a directory containing additional content to be embedded in the bootstrapper. You can generate such a directory using '0install export'.</value>
  </data>
  <data name="OptionCustomizableStorePath" xml:space="preserve">
    <value>Offer the user to choose a custom path for storing implementations.</value>
  </data>
  <data name="OptionEstimatedRequiredSpace" xml:space="preserve">
    <value>Show the estimated disk {SPACE} required (in bytes). Implicitly sets --customizable-store-path too.</value>
  </data>
  <data name="OptionForce" xml:space="preserve">
    <value>Overwrite existing files.</value>
  </data>
  <data name="OptionGnuPGPassphrase" xml:space="preserve">
    <value>Use {PASS} to unlock the GnuPG secret key.</value>
  </data>
  <data name="OptionInstallationDirectory" xml:space="preserve">
    <value>The {PATH} of the directory the application to be captured is installed in. Leave unset to auto-detect.</value>
  </data>
  <data name="OptionHelp" xml:space="preserve">
    <value>Show the built-in help text.</value>
  </data>
  <data name="OptionIntegrateArgs" xml:space="preserve">
    <value>Command-line {ARGUMENTS} to pass to '0install integrate'. Leave unset to not call '0install integrate' at all.</value>
  </data>
  <data name="OptionKey" xml:space="preserve">
    <value>Key to use for signing (if you have more than one, or if you want to resign with a different key).</value>
  </data>
  <data name="OptionMainExe" xml:space="preserve">
    <value>The relative {PATH} to the main EXE of the application to be captured. Leave unset to auto-detect.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="OptionTemplate" xml:space="preserve">
    <value>{URI} or path to the boostrap template executable. Leave unset to download from default location.</value>
  </data>
  <data name="OptionUnsign" xml:space="preserve">
    <value>Remove any existing signatures.</value>
  </data>
  <data name="OptionVersion" xml:space="preserve">
    <value>Display version information.</value>
  </data>
  <data name="OptionXmlSign" xml:space="preserve">
    <value>Add an XML signature block. (All remote feeds must be signed.)</value>
  </data>
  <data name="UnknownMode" xml:space="preserve">
    <value>Unknown operation mode.
Try {0}</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage:</value>
  </data>
</root>