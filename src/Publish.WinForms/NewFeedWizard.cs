// Copyright Bastian Eicher et al.
// Licensed under the GNU Lesser Public License

using System.Windows.Forms;
using JetBrains.Annotations;
using NanoByte.Common.Tasks;
using ZeroInstall.Store.Model;
using ZeroInstall.Store.Trust;

namespace ZeroInstall.Publish.WinForms
{
    /// <summary>
    /// A wizard guiding the user through creating a new <see cref="Feed"/>.
    /// </summary>
    public sealed partial class NewFeedWizard : Form
    {
        private NewFeedWizard(IOpenPgp openPgp)
        {
            _openPgp = openPgp;

            InitializeComponent();
        }

        /// <summary>
        /// Runs the wizard.
        /// </summary>
        /// <param name="openPgp">Used to get a list of <see cref="OpenPgpSecretKey"/>s.</param>
        /// <param name="owner">The parent window the displayed window is modal to; can be <c>null</c>.</param>
        /// <returns>The feed generated by the wizard; <c>null</c> if the user canceled.</returns>
        [CanBeNull]
        public static SignedFeed Run([NotNull] IOpenPgp openPgp, [CanBeNull] IWin32Window owner = null)
        {
            using (var wizard = new NewFeedWizard(openPgp))
            {
                wizard.ShowDialog(owner);
                return wizard._signedFeed;
            }
        }

        /// <summary>Shared between wizard pages.</summary>
        private readonly FeedBuilder _feedBuilder = new FeedBuilder();

        /// <summary>Shared between installer-specific wizard pages.</summary>
        private readonly InstallerCapture _installerCapture = new InstallerCapture();

        private void Retrieve(DownloadRetrievalMethod retrievalMethod, string localPath)
        {
            _feedBuilder.RetrievalMethod = retrievalMethod;

            using (var handler = new DialogTaskHandler(this))
            {
                _feedBuilder.TemporaryDirectory = (localPath == null)
                    ? retrievalMethod.DownloadAndApply(handler)
                    : retrievalMethod.LocalApply(localPath, handler);
            }
        }
    }
}
